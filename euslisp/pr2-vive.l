#!/usr/bin/env roseus

(load "package://pr2eus/pr2-interface.l")
(ros::load-ros-manifest "sensor_msgs")

(defun init ()
  (ros::roseus "vive_pr2eus")
  (pr2-init)
  (send *ri* :angle-vector (send *pr2* :reset-manip-pose))
  (send *ri* :stop-grasp :arms)
  (send *ri* :wait-interpolation)
  (setq *larm-grasp* nil)
  (setq *rarm-grasp* nil)
  (setq *larm-trigger* nil)
  (setq *rarm-trigger* nil)
  (setq *larm-menu* nil)
  (setq *rarm-menu* nil)
  (setq *prev-larm-trigger* nil)
  (setq *prev-rarm-trigger* nil)
  (setq *prev-larm-menu* nil)
  (setq *prev-rarm-menu* nil)
  (setq *larm-enable* nil)
  (setq *rarm-enable* nil)
  (setq *hmd-frame-id* "/hmd")
  (setq *lvive-frame-id* "/controller_LHR_FD35BD42")
  (setq *lvive-topic-name* (format nil "/vive~A/joy" *lvive-frame-id*))
  (ros::subscribe *lvive-topic-name* sensor_msgs::Joy #'(lambda (msg) (vive-button-cb msg :larm)))
  (setq *rvive-frame-id* "/controller_LHR_F7AFBF47")
  (setq *rvive-topic-name* (format nil "/vive~A/joy" *rvive-frame-id*))
  (ros::subscribe *rvive-topic-name* sensor_msgs::Joy #'(lambda (msg) (vive-button-cb msg :rarm)))
  (setq *bvive-frame-id* "/lighthouse_LHB_11CFA4E1")
  (setq *cvive-frame-id* "/lighthouse_LHB_8E924CC3")
  (setq *tfl* (instance ros::transform-listener :init))
  (setq *scale* 2.0)
  (setq *av-tm* 1000)
  (setq *av-scale* 10.0)
  (setq *feedback-topic-name* "/vive/set_feedback")
  (ros::advertise *feedback-topic-name* sensor_msgs::JoyFeedback 1)
  (objects (list *pr2*))
  (ros::rate 10))

(defun get-vive-coords (arm)
  (when (not (or (eq arm :larm) (eq arm :rarm)))
    (print (format nil "~A arm is not supported ~%" arm))
    (return nil))
  (let (coords (vive-frame-id (if (eq arm :larm) *lvive-frame-id* *rvive-frame-id*)))
    (send *tfl* :wait-for-transform *hmd-frame-id* vive-frame-id (ros::time 0) 0.1)
    (setq coords (send *tfl* :lookup-transform *hmd-frame-id* vive-frame-id (ros::time 0)))
    (when coords
      (send coords :transform (make-coords :rpy (float-vector 0 0 pi)) :world)
      (send coords :transform (make-coords :rpy (float-vector -pi/2 0 0)) :world)
      (setq *tmp-coords* (send (send (send *pr2* :head-end-coords) :copy-worldcoords) :transform (send coords :copy-worldcoords)))
      (send coords :transform (make-coords :rpy (float-vector 0 0 -pi/2)))
      (send coords :transform (make-coords :rpy (float-vector pi/2 0 0)))
      coords)))

(defun arm-cb (arm)
  (let (hmd->vive-coords world->head-coords target-coords target-pos)
    (setq hmd->vive-coords (get-vive-coords arm))
    (setq world->head-coords (send (send *pr2* :head-end-coords) :copy-worldcoords))
    (setq pr2-height (elt (send world->head-coords :worldpos) 2))
    (when hmd->vive-coords
      (setq target-coords (send world->head-coords :transform hmd->vive-coords))
      (setq target-pos (send target-coords :worldpos))
      (setq target-coords (make-coords :pos (float-vector (* *scale* (elt target-pos 0))
                                                          (* *scale* (elt target-pos 1))
                                                          (- pr2-height (* *scale* (- pr2-height (elt target-pos 2)))))
                                       :rot (send target-coords :worldrot)))
      (send *pr2* arm :inverse-kinematics target-coords :rotation-axis t :revert-if-fail nil :stop 3 :debug-view nil)
      ; (unless (send *pr2* arm :inverse-kinematics target-coords :rotation-axis t :revert-if-fail t :stop 100 :debug-view nil)
      ;   (send *pr2* arm :inverse-kinematics target-coords :rotation-axis nil :revert-if-fail nil :stop 100 :debug-view nil))
      target-coords)))

(defun head-cb ()
  (let (coords rpy)
    (send *tfl* :wait-for-transform *bvive-frame-id* *hmd-frame-id* (ros::time 0) 0.1)
    (setq coords (send *tfl* :lookup-transform *bvive-frame-id* *hmd-frame-id* (ros::time 0)))
    (when coords
      (send coords :transform (make-coords :rpy (float-vector 0 pi 0)) :world)
      (setq rpy
            (if (> pi/2 (abs (elt (car (send coords :rpy-angle)) 0)))
              (car (send coords :rpy-angle))
              (cadr (send coords :rpy-angle))))
      (pprint (send coords :rpy-angle))
      (send *pr2* :head-neck-p :joint-angle (rad2deg (* -1 (elt rpy 2))))
      (send *pr2* :head-neck-y :joint-angle (rad2deg (elt rpy 1))))))

(defun enable-cb ()
  (when (and (not (eq *larm-menu* *prev-larm-menu*)) *larm-menu*)
    (setq *larm-enable* (not *larm-enable*))
    (send-feedback 2))
  (unless *larm-enable* (send *ri* :cancel-angle-vector :controller-type :larm-controller))
  (when (and (not (eq *rarm-menu* *prev-rarm-menu*)) *rarm-menu*)
    (setq *rarm-enable* (not *rarm-enable*))
    (send-feedback 1))
  (unless *rarm-enable* (send *ri* :cancel-angle-vector :controller-type :rarm-controller)))

(defun gripper-cb (arm)
  (if (eq arm :larm)
    (when (and (not (eq *larm-trigger* *prev-larm-trigger*)) *larm-trigger*)
      (if *larm-grasp*
        (send *ri* :stop-grasp :larm :wait nil)
        (send *ri* :start-grasp :larm :wait nil))
      (setq *larm-grasp* (not *larm-grasp*)))
    (when (and (not (eq *rarm-trigger* *prev-rarm-trigger*)) *rarm-trigger*)
      (if *rarm-grasp*
        (send *ri* :stop-grasp :rarm :wait nil)
        (send *ri* :start-grasp :rarm :wait nil))
      (setq *rarm-grasp* (not *rarm-grasp*)))))

(defun vive-button-cb (msg arm)
  (if (eq arm :larm)
    (progn
      (setq *prev-larm-trigger* *larm-trigger*)
      (setq *prev-larm-menu* *larm-menu*)
      (setq *larm-trigger* (> (elt (send msg :buttons) 1) 0))
      (setq *larm-menu* (> (elt (send msg :buttons) 0) 0)))
    (progn
      (setq *prev-rarm-trigger* *rarm-trigger*)
      (setq *prev-rarm-menu* *rarm-menu*)
      (setq *rarm-trigger* (> (elt (send msg :buttons) 1) 0))
      (setq *rarm-menu* (> (elt (send msg :buttons) 0) 0)))))

(defun send-feedback (&optional (id 0))
  (let (msg)
    (setq msg (instance sensor_msgs::JoyFeedback :init
                        :type 1 :id id :intensity 3000))
    (ros::publish *feedback-topic-name* msg)))

(defun main ()
  (init)
  (ros::rate 10)
  (while (ros::ok)
    (head-cb)
    (enable-cb)
    (when *larm-enable*
      (setq *larm-coords* (arm-cb :larm))
      (when *larm-coords* (send *larm-coords* :draw-on :flush t :size 50 :color #f(0 1 0) :width 5))
      )
    (when *rarm-enable*
      (setq *rarm-coords* (arm-cb :rarm))
      (when *rarm-coords* (send *rarm-coords* :draw-on :flush t :size 50 :color #f(1 0 0) :width 5)))
    (when *larm-enable*
      (gripper-cb :larm)
      (send *ri* :angle-vector (send *pr2* :angle-vector) *av-tm* :larm-controller 0
            :min-time 0.1 :scale *av-scale*))
    (when *rarm-enable*
      (gripper-cb :rarm)
      (send *ri* :angle-vector (send *pr2* :angle-vector) *av-tm* :rarm-controller 0
            :min-time 0.1 :scale *av-scale*))
    (send *ri* :angle-vector (send *pr2* :angle-vector) *av-tm* :head-controller 0 :scale *av-scale*)
    (send *irtviewer* :draw-objects)
    (x::window-main-one)
    (ros::spin-once)
    (ros::sleep)))
