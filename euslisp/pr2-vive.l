#!/usr/bin/env roseus

(load "package://pr2eus/pr2-interface.l")

(defun init ()
  (ros::roseus "vive_pr2eus")
  (pr2-init)
  (setq *hmd-frame-id* "/hmd")
  (setq *lvive-frame-id* "/controller_LHR_FD35BD42")
  (setq *rvive-frame-id* "/controller_LHR_F7AFBF47")
  (setq *bvive-frame-id* "/lighthouse_LHB_11CFA4E1")
  (setq *cvive-frame-id* "/lighthouse_LHB_8E924CC3")
  (setq *tfl* (instance ros::transform-listener :init))
  (setq *send-time* 1000)
  (setq *scale* 1.8)
  (objects (list *pr2*))
  (ros::rate 10))

(defun get-vive-coords (arm)
  (when (not (or (eq arm :larm) (eq arm :rarm)))
    (print (format nil "~A arm is not supported ~%" arm))
    (return nil))
  (let (coords (vive-frame-id (if (eq arm :larm) *lvive-frame-id* *rvive-frame-id*)))
    (send *tfl* :wait-for-transform *hmd-frame-id* vive-frame-id (ros::time 0) 0.1)
    (setq coords (send *tfl* :lookup-transform *hmd-frame-id* vive-frame-id (ros::time 0)))
    (when coords
      (send coords :transform (make-coords :rpy (float-vector 0 0 pi)) :world) 
      (send coords :transform (make-coords :rpy (float-vector -pi/2 0 0)) :world) 
      (setq *tmp-coords* (send (send (send *pr2* :head-end-coords) :copy-worldcoords) :transform (send coords :copy-worldcoords)))
      (send coords :transform (make-coords :rpy (float-vector 0 0 -pi/2)))
      (send coords :transform (make-coords :rpy (float-vector pi/2 0 0)))
      coords)))

(defun arm-cb (arm)
  (let (hmd->vive-coords world->head-coords target-coords target-pos)
    (setq hmd->vive-coords (get-vive-coords arm))
    (setq world->head-coords (send (send *pr2* :head-end-coords) :copy-worldcoords))
    (when hmd->vive-coords
      (setq target-coords (send world->head-coords :transform hmd->vive-coords)) 
      (setq target-pos (send target-coords :worldpos))
      (setq target-coords (make-coords :pos (float-vector (* *scale* (elt target-pos 0))
                                                          (* *scale* (elt target-pos 1))
                                                          (elt target-pos 2))
                                       :rot (send target-coords :worldrot)))
      (unless (send *pr2* arm :inverse-kinematics target-coords :rotation-axis t :revert-if-fail nil :stop 100 :debug-view nil)
        (send *pr2* arm :inverse-kinematics target-coords :rotation-axis nil :revert-if-fail t :stop 100 :debug-view nil))
      target-coords)))

(defun head-cb ()
  (let (coords rpy)
    (send *tfl* :wait-for-transform *bvive-frame-id* *hmd-frame-id* (ros::time 0) 0.1)
    (setq coords (send *tfl* :lookup-transform *bvive-frame-id* *hmd-frame-id* (ros::time 0)))
    (when coords
      (send coords :transform (make-coords :rpy (float-vector 0 pi 0)) :world)
      (setq rpy (car (send coords :rpy-angle)))
      (send *pr2* :head-neck-p :joint-angle (rad2deg (* -1 (elt rpy 2))))
      (send *pr2* :head-neck-y :joint-angle (rad2deg (elt rpy 1)))
    )))

(defun main ()
  (init)
  (ros::rate 10)
  (while (ros::ok)
    (head-cb)
    (setq *larm-coords* (arm-cb :larm))
    (setq *rarm-coords* (arm-cb :rarm))
    (when *larm-coords* (send *larm-coords* :draw-on :flush t :size 50 :color #f(0 1 0) :width 5))
    (when *rarm-coords* (send *rarm-coords* :draw-on :flush t :size 50 :color #f(1 0 0) :width 5))
    (send *ri* :angle-vector (send *pr2* :angle-vector) *send-time* nil 0 :scale 3.0)
    (send *irtviewer* :draw-objects)
    (x::window-main-one)
    (ros::spin-once)
    (ros::sleep)))
