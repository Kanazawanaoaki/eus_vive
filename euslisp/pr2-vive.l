(load "package://pr2eus/pr2-interface.l")

(defun init ()
  (ros::roseus "vive_pr2eus")
  (setq *pr2* (instance pr2-robot :init))
  (setq *hmd-frame-id* "/hmd")
  (setq *lvive-frame-id* "/controller_LHR_FD35BD42")
  (setq *rvive-frame-id* "/controller_LHR_F7AFBF47")
  (setq *tfl* (instance ros::transform-listener :init))
  (objects (list *pr2*))
  (ros::rate 10))

(defun get-vive-coords (arm)
  (when (not (or (eq arm :larm) (eq arm :rarm)))
    (print (format nil "~A arm is not supported ~%" arm))
    (return nil))
  (let (coords rot)
    (send *tfl* :wait-for-transform *hmd-frame-id* *hmd-frame-id* (ros::time 0) 0.1)
    (setq coords (send *tfl* :lookup-transform *hmd-frame-id*
    	      	    (if (eq arm :larm) *lvive-frame-id* *rvive-frame-id*)
              	    (ros::time 0)))
    (when coords
      (send coords :transform (make-coords :rpy (float-vector 0 0 pi)) :world) 
      (send coords :transform (make-coords :rpy (float-vector -pi/2 0 0)) :world) 
      (setq *tmp-coords* (send (send (send *pr2* :head-end-coords) :copy-worldcoords) :transform (send coords :copy-worldcoords)))
      (send coords :transform (make-coords :rpy (float-vector 0 0 -pi/2)))
      (send coords :transform (make-coords :rpy (float-vector pi/2 0 0)))
      ;; (setq coords (make-coords :pos (float-vector (* -1 (elt (send coords :pos) 1))
      ;;                                              (* -1 (elt (send coords :pos) 0))
      ;;                                              (* -1 (elt (send coords :pos) 2)))))
      coords)))

(defun arm-cb (arm)
  (let (hmd->vive-coords world->head-coords target-coords)
    (setq hmd->vive-coords (get-vive-coords arm))
    (setq world->head-coords (send (send *pr2* :head-end-coords) :copy-worldcoords))
    (when hmd->vive-coords
      (setq target-coords (send world->head-coords :transform hmd->vive-coords)) 
      (send *pr2* arm :inverse-kinematics
            target-coords :rotation-axis t :revert-if-fail nil :use-torso t)
      target-coords)))

(defun larm-cb ()
  (setq *larm-coords* (arm-cb :larm))
  (when *larm-coords* (send *larm-coords* :draw-on :flush t :size 50 :color #f(0 1 0) :width 5)))

(defun rarm-cb ()
  (setq *rarm-coords* (arm-cb :rarm))
  (when *rarm-coords* (send *rarm-coords* :draw-on :flush t :size 50 :color #f(1 0 0) :width 5)))

(defun main ()
  (init)
  (while (ros::ok)
    (larm-cb)
    (rarm-cb)
    (send *irtviewer* :draw-objects)
    (x::window-main-one)
    (ros::spin-once)
    (ros::sleep)))
