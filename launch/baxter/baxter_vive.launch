<launch>
  <arg name="main" default="true" />
  <arg name="vive" default="true" />
  <arg name="head" default="true" />
  <arg name="mirror" default="false" />
  <arg name="logging" default="true" />
  <arg name="twitter" default="true" />
  <arg name="debug" default="false" />
  <arg name="mask_rcnn" default="false" />
  <arg name="miraikan" default="false" />
  <arg name="lgripper_softhand" default="false" />
  <arg name="rgripper_softhand" default="false" />

  <!-- vive -->
  <arg name="b_lighthouse_id" />
  <arg name="c_lighthouse_id" />
  <arg name="l_controller_id" />
  <arg name="r_controller_id" />

  <!-- workspace -->
  <arg name="workspace_max_x" default="false" />
  <arg name="workspace_min_x" default="false" />
  <arg name="workspace_max_y" default="false" />
  <arg name="workspace_min_y" default="false" />
  <arg name="workspace_max_z" default="false" />
  <arg name="workspace_min_z" default="false" />

  <!-- gripper and display-->
  <arg name="finger" default="standard_narrow" />
  <arg name="finger_tip" default="paddle_tip" />
  <arg name="xdisplay_max_width" default="1024" if="$(arg miraikan)" />
  <arg name="xdisplay_max_width" default="1920" unless="$(arg miraikan)" />
  <arg name="xdisplay_max_height" default="600" if="$(arg miraikan)" />
  <arg name="xdisplay_max_height" default="1200" unless="$(arg miraikan)" />
  <arg name="lgripper_type" value=":softhand" if="$(arg lgripper_softhand)" />
  <arg name="lgripper_type" value=":parallel" unless="$(arg lgripper_softhand)" />
  <arg name="rgripper_type" value=":softhand" if="$(arg rgripper_softhand)" />
  <arg name="rgripper_type" value=":parallel" unless="$(arg rgripper_softhand)" />

  <!-- camera -->
  <arg name="camera_ns" default="realsense_head" />
  <arg name="image_left" default="/virtual_camera/left/rviz_image" />
  <arg name="image_right" default="/virtual_camera/right/rviz_image" />

  <param name="robot_description"
         command="$(find xacro)/xacro --inorder $(find eus_vive)/urdf/baxter.urdf.xacro
                  gazebo:=false left_electric_gripper:=true right_electric_gripper:=true
                  finger:=$(arg finger) finger_tip:=$(arg finger_tip)"/>

  <param name="robot_description_semantic"
         command="$(find xacro)/xacro.py --inorder
                  $(find baxter_moveit_config)/config/baxter.srdf.xacro
                  left_electric_gripper:=true right_electric_gripper:=true
                  left_tip_name:=left_gripper right_tip_name:=right_gripper"/>


  <include file="$(find jsk_baxter_startup)/baxter.launch">
    <arg name="load_robot_description" value="false" />
    <arg name="launch_robot_state_publisher" value="true" />
    <arg name="sanity_check_joint_trajectory" value="false" />
    <arg name="launch_moveit" value="false" />
    <arg name="launch_time_signal" value="false" />
    <arg name="launch_db" value="false"/>
    <arg name="launch_twitter" value="false"/>
    <arg name="launch_gripper_action" value="true" />
    <arg name="left_electric_gripper" value="true" />
    <arg name="right_electric_gripper" value="true" />
    <arg name="arm_interpolation" value="bezier_with_velocity" />
    <arg name="arm_control_mode" value="velocity" />
  </include>

  <group ns="rgripper" if="$(arg rgripper_softhand)">
    <include file="$(find softhand_ros)/launch/softhand.launch">
      <arg name="device" value="/dev/rhand-ft2232c" />
    </include>
  </group>
  <group ns="lgripper" if="$(arg lgripper_softhand)">
    <include file="$(find softhand_ros)/launch/softhand.launch">
      <arg name="device" value="/dev/lhand-ft2232c" />
    </include>
  </group>

  <include file="$(find eus_vive)/launch/include/vive.launch" if="$(arg vive)" >
    <arg name="image_left" value="$(arg image_left)" />
    <arg name="image_right" value="$(arg image_right)" />
  </include>

  <group ns="eus_vive">
    <rosparam subst_value="true">
      b_lighthouse_id: $(arg b_lighthouse_id)
      c_lighthouse_id: $(arg c_lighthouse_id)
      l_controller_id: $(arg l_controller_id)
      r_controller_id: $(arg r_controller_id)
      workspace:
        max_x: $(arg workspace_max_x)
        min_x: $(arg workspace_min_x)
        max_y: $(arg workspace_max_y)
        min_y: $(arg workspace_min_y)
        max_z: $(arg workspace_max_z)
        min_z: $(arg workspace_min_z)
    </rosparam>
  </group>
  <group if="$(arg main)">
    <group if="$(arg mirror)">
      <node if="$(arg head)" pkg="eus_vive" type="baxter-vive.l" name="baxter_vive_main"
            args="&quot;(main :head t :mirror t :lgripper $(arg lgripper_type) :rgripper $(arg rgripper_type) :loop-enable nil)&quot;" output="screen" />
      <node unless="$(arg head)" pkg="eus_vive" type="baxter-vive.l" name="baxter_vive_main"
            args="&quot;(main :head nil :mirror t :lgripper $(arg lgripper_type) :rgripper $(arg rgripper_type) :loop-enable nil)&quot;" output="screen" />
    </group>
    <group unless="$(arg mirror)">
      <node if="$(arg head)" pkg="eus_vive" type="baxter-vive.l" name="baxter_vive_main"
            args="&quot;(main :head t :mirror nil :lgripper $(arg lgripper_type) :rgripper $(arg rgripper_type) :loop-enable nil)&quot;" output="screen" />
      <node unless="$(arg head)" pkg="eus_vive" type="baxter-vive.l" name="baxter_vive_main"
            args="&quot;(main :head nil :mirror nil :lgripper $(arg lgripper_type) :rgripper $(arg rgripper_type) :loop-enable nil)&quot;" output="screen" />
    </group>
  </group>

  <node name="rosconsole_overlay_text"
        pkg="jsk_rviz_plugins" type="rosconsole_overlay_text.py">
    <rosparam>
      nodes:
        - /baxter_vive_main
      exclude_regexes:
        - .*follow_joint_trajectory.*
        - .*:joint-angle.*
        - .*:wait-interpolation-until.*
        - ^;;.*
        - if you do not have gripper,.*
    </rosparam>
  </node>

  <node name="eus_vive_status_visualizer"
      pkg="eus_vive" type="eus_vive_status_visualizer.py">
    <remap from="~input/image" to="/eus_vive/irtviewer/image" />
    <remap from="~input/status" to="/eus_vive/status" />
  </node>

  <node name="eus_vive_status_sounder"
      pkg="eus_vive" type="eus_vive_status_sounder.py">
    <remap from="~output/sound" to="/robotsound" />
    <remap from="~input/status" to="/eus_vive/status" />
  </node>

  <node name="irtviewer_xdisplay"
        pkg="jsk_baxter_startup" type="xdisplay_image_topic.py"
        args="/eus_vive_status_visualizer/output/image">
    <rosparam subst_value="true">
      max_width: $(arg xdisplay_max_width)
      max_height: $(arg xdisplay_max_height)
    </rosparam>
  </node>

  <group if="$(arg head)">
    <node name="realsense_transform_publisher" pkg="tf" type="static_transform_publisher"
          args="0.05 0.05 0.1 -1.5 -0.6 0.0 head_camera $(arg camera_ns)_link 100" />
    <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
      <arg name="camera" value="$(arg camera_ns)" />
      <arg name="enable_pointcloud" value="true" />
      <arg name="align_depth" value="true"/>
    </include>
    <group ns="virtual_camera">
      <group ns="left">
        <node name="virtual_camera_tf_static_transform_publisher" pkg="tf" type="static_transform_publisher"
              args="-0.0315 0 0 0 0 0 /realsense_head_color_optical_frame /virtual_camera_left_rgb_optical_frame 100" />
        <node name="virtual_camera_info_publisher" pkg="eus_vive" type="virtual_camera_info_publisher.py"
              output="screen">
          <remap from="~input/camera_info" to="/$(arg camera_ns)/color/camera_info" />
          <rosparam>
            frame_id: virtual_camera_left_rgb_optical_frame
            height: 1080
            width: 1200
          </rosparam>
        </node>
        <node name="depth_image_creator" pkg="nodelet" type="nodelet"
              args="standalone jsk_pcl/DepthImageCreator" output="screen">
          <remap from="~input" to="/$(arg camera_ns)/depth_registered/points" />
          <remap from="~info" to="virtual_camera_info_publisher/output/camera_info" />
        </node>
      </group>
      <group ns="right">
        <node name="virtual_camera_tf_static_transform_publisher" pkg="tf" type="static_transform_publisher"
              args="0.0315 0 0 0 0 0 /realsense_head_color_optical_frame /virtual_camera_right_rgb_optical_frame 100" />
        <node name="virtual_camera_info_publisher" pkg="eus_vive" type="virtual_camera_info_publisher.py"
              output="screen">
          <remap from="~input/camera_info" to="/$(arg camera_ns)/color/camera_info" />
          <rosparam>
            frame_id: virtual_camera_right_rgb_optical_frame
            height: 1080
            width: 1200
          </rosparam>
        </node>
        <node name="depth_image_creator" pkg="nodelet" type="nodelet"
              args="standalone jsk_pcl/DepthImageCreator" output="screen">
          <remap from="~input" to="/$(arg camera_ns)/depth_registered/points" />
          <remap from="~info" to="virtual_camera_info_publisher/output/camera_info" />
        </node>
      </group>
    </group>
  </group>
  <include file="$(find eus_vive)/launch/include/mask_rcnn.launch" if="$(arg mask_rcnn)" >
    <arg name="INPUT_IMAGE" value="/$(arg camera_ns)/color/image_rect_color" />
  </include>

  <node name="soundplay_node"
        pkg="sound_play" type="soundplay_node.py">
    <remap from="sound_play" to="robotsound" />
  </node>
  <node name="soundplay_jp_node"
        pkg="sound_play" type="soundplay_node.py">
    <remap from="robotsound" to="robotsound_jp" />
    <remap from="sound_play" to="robotsound_jp" />
  </node>

  <include file="$(find eus_vive)/launch/baxter/baxter_logging.launch" if="$(arg logging)">
    <arg name="twitter" value="$(arg twitter)" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="camera_ns" value="$(arg camera_ns)" />
  </include>

  <node name="service_button" pkg="jsk_rqt_plugins" type="rqt_service_buttons">
    <rosparam subst_value="true" >
      layout_yaml_file: file://$(find eus_vive)/resource/reset_button_layout.yaml 
    </rosparam>
  </node>

  <node name="$(anon rviz)" pkg="rviz" type="rviz" if="$(arg head)"
        args="-d $(find eus_vive)/rvizconfig/baxter/baxter_vive_visualization.rviz" />
  <node name="$(anon rviz)" pkg="rviz" type="rviz" unless="$(arg head)"
        args="-d $(find eus_vive)/rvizconfig/baxter/baxter_vive.rviz" />
</launch>
